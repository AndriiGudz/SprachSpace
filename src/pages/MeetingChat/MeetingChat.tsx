import { useEffect, useState, useCallback, useMemo, useRef } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { useTranslation } from 'react-i18next'
import { useSelector, useDispatch } from 'react-redux'
import type { AppDispatch } from '../../store/store'
import {
  Box,
  Container,
  Typography,
  Chip,
  Divider,
  Card,
  CardContent,
  useTheme,
  useMediaQuery,
  LinearProgress,
  Paper,
  Button,
  CircularProgress,
  Tooltip,
} from '@mui/material'
import {
  Clock,
  Users,
  Tag,
  Globe,
  Timer,
  Lock,
  AlertCircle,
  CheckCircle,
  Crown,
} from 'lucide-react'
import {
  format,
  parseISO,
  differenceInMinutes,
  differenceInSeconds,
} from 'date-fns'
import { Meeting } from '../../components/MeetingCard/types'
import { RootState } from '../../store/store'
import { mapApiRoomToMeeting } from '../Meetings/Meetings'
import Loader from '../../components/Loader/Loader'
import VideoChat from '../../components/VideoChat/VideoChat'
import { sendJoinRequest } from '../../store/redux/roomSlice/roomSlice'
import { useRoomOnlineStatus } from '../../hooks/useRoomOnlineStatus'
import {
  containerStyle,
  headerStyle,
  chatContainerStyle,
  videoAreaStyle,
} from './styles'

function MeetingChat() {
  // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const componentId = useRef(Math.random().toString(36).substr(2, 9))

  console.log('üèóÔ∏è MeetingChat component MOUNTING with ID:', componentId.current)

  const { meetingId } = useParams()
  const { t } = useTranslation()
  const navigate = useNavigate()
  const dispatch = useDispatch<AppDispatch>()

  // –£–±—Ä–∞–ª–∏ stableDispatch - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

  const theme = useTheme()
  const isMobile = useMediaQuery(theme.breakpoints.down('md'))
  const [meeting, setMeeting] = useState<Meeting | null>(null)
  const [currentTime, setCurrentTime] = useState(new Date())
  const [activeParticipants] = useState(0) // TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º Daily.co
  const [hasJoinedRoom, setHasJoinedRoom] = useState(false)
  const [isJoiningRoom, setIsJoiningRoom] = useState(false)
  const [isLoadingMeeting, setIsLoadingMeeting] = useState(true) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∏
  // –£–±—Ä–∞–ª–∏ hasJoinedWaiting –∏ hasNotifiedPresence - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã —Ä–∞–∑ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
  const [joinRequestStatus, setJoinRequestStatus] = useState<
    'none' | 'pending' | 'accepted' | 'rejected'
  >('none')
  const [joinError, setJoinError] = useState<string | null>(null)
  const [backendJoinStatus, setBackendJoinStatus] = useState<
    'PENDING' | 'ACCEPTED' | 'DECLINED' | null
  >(null)

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –∏–∑ Redux store
  const { rooms, isLoading, userParticipations } = useSelector(
    (state: RootState) => state.rooms
  )

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
  const {
    isAuthenticated,
    id: userId,
    rating,
  } = useSelector((state: RootState) => state.user)

  // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    console.log('üë§ User data from Redux:', {
      isAuthenticated,
      userId,
      userType: typeof userId,
      timestamp: new Date().toISOString(),
    })
  }, [isAuthenticated, userId])

  // –ü–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
  const onlineUsers = meeting?.roomOnlineUsers || []
  const onlineUsersCount = meeting?.countOnlineUser || 0

  // –£–ø—Ä–∞–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç–µ
  const { isOnline } = useRoomOnlineStatus({
    roomId: meeting?.id,
    userId: userId,
    isAuthenticated: isAuthenticated,
    enabled: true, // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
  })

  // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
  useEffect(() => {
    console.log('üîÑ Online status changed:', {
      isOnline,
      roomId: meeting?.id,
      userId,
      isAuthenticated,
      timestamp: new Date().toISOString(),
    })
  }, [isOnline, meeting?.id, userId, isAuthenticated])

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ - –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è updateRoomData

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã
  // –í –¥–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–ª–µ —Å ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ `creator` (—á–∏—Å–ª–æ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å id)
  const isOrganizer = useMemo(() => {
    if (!meeting || !userId) return false
    const creatorId =
      typeof meeting.creator === 'number'
        ? meeting.creator
        : (meeting.creator as { id?: number } | undefined)?.id
    return creatorId === userId
  }, [meeting, userId])

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
  const userParticipation = useMemo(() => {
    if (!meeting?.id || !userId) return null

    // –ò—â–µ–º –≤ participants –º–∞—Å—Å–∏–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if (meeting.participants) {
      const participant = meeting.participants.find(
        (p) => p.user?.id === userId
      )
      if (participant) {
        console.log(
          'Found user participation in meeting.participants:',
          participant
        )
        return participant
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º Redux store
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —á—Ç–æ userParticipations –≤—Å–µ–≥–¥–∞ –æ–±—ä–µ–∫—Ç
    const safeUserParticipations = userParticipations || {}
    if (
      safeUserParticipations &&
      typeof safeUserParticipations === 'object' &&
      safeUserParticipations[meeting.id]
    ) {
      console.log(
        'Found user participation in Redux store:',
        safeUserParticipations[meeting.id]
      )
      return safeUserParticipations[meeting.id]
    }

    return null
  }, [meeting?.id, meeting?.participants, userParticipations, userId]) // –î–æ–±–∞–≤–ª—è–µ–º meeting?.participants –æ—Ç–¥–µ–ª—å–Ω–æ

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —É—á–∞—Å—Ç–∏—è (—É—á–∏—Ç—ã–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã, –≥–¥–µ —Å—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
  const isAcceptedParticipant = useMemo(() => {
    if (isOrganizer) return true
    if (backendJoinStatus === 'ACCEPTED') return true
    if (!userParticipation) return false
    const normalized = userParticipation.status?.toUpperCase()
    if (normalized === 'ACCEPTED') return true
    // –í –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–µ —É—á–∞—Å—Ç–∏–µ (—Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–∏—Å–ª–∞—Ç—å status)
    if (
      !meeting?.privateRoom &&
      (normalized === undefined || normalized === '')
    ) {
      return true
    }
    return false
  }, [isOrganizer, backendJoinStatus, userParticipation, meeting?.privateRoom])

  // –ï–¥–∏–Ω—ã–π –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è UI-–∏–Ω–¥–∏–∫–∞—Ü–∏–∏
  const resolvedJoinStatus = useMemo<
    'PENDING' | 'ACCEPTED' | 'REJECTED' | null
  >(() => {
    if (isOrganizer) return 'ACCEPTED'
    if (backendJoinStatus) {
      return backendJoinStatus === 'DECLINED' ? 'REJECTED' : backendJoinStatus
    }
    const local = userParticipation?.status?.toUpperCase() as
      | 'PENDING'
      | 'ACCEPTED'
      | 'REJECTED'
      | undefined
    if (local) return local
    if (
      isAcceptedParticipant ||
      joinRequestStatus === 'accepted' ||
      hasJoinedRoom
    )
      return 'ACCEPTED'
    if (joinRequestStatus === 'pending') return 'PENDING'
    if (joinRequestStatus === 'rejected') return 'REJECTED'
    return null
  }, [
    isOrganizer,
    backendJoinStatus,
    userParticipation?.status,
    isAcceptedParticipant,
    joinRequestStatus,
    hasJoinedRoom,
  ])

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ ID –∫–æ–º–Ω–∞—Ç—ã
  const meetingIdRef = useRef<number | null>(null)

  // –û–±–Ω–æ–≤–ª—è–µ–º ref –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ID –∫–æ–º–Ω–∞—Ç—ã
  useEffect(() => {
    if (meeting?.id && meetingIdRef.current !== meeting.id) {
      meetingIdRef.current = meeting.id
      console.log('üìå Meeting ID ref updated to:', meeting.id)
    }
  }, [meeting?.id])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã - –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç meeting
  const updateRoomData = useCallback(
    async (roomId?: number) => {
      const targetRoomId = roomId || meetingIdRef.current
      if (!targetRoomId) {
        console.log('‚ùå No room ID for updating room data')
        return
      }

      console.log('üîÑ Updating room data for room:', targetRoomId)

      try {
        const response = await fetch(
          `http://localhost:8080/api/room/id?roomId=${targetRoomId}`
        )
        if (response.ok) {
          const updatedRoom = await response.json()
          console.log('üì• Received updated room data:', {
            roomId: updatedRoom.id,
            countOnlineUser: updatedRoom.countOnlineUser,
            roomOnlineUsers: updatedRoom.roomOnlineUsers?.length || 0,
            quantityParticipant: updatedRoom.quantityParticipant,
          })

          const updatedMeeting = mapApiRoomToMeeting(updatedRoom)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è —Å–æ—Å—Ç–∞–≤ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          setMeeting((prevMeeting) => {
            const hasOnlineUsersChanged = () => {
              if (
                !prevMeeting?.roomOnlineUsers ||
                !updatedMeeting.roomOnlineUsers
              ) {
                return (
                  prevMeeting?.roomOnlineUsers !==
                  updatedMeeting.roomOnlineUsers
                )
              }

              // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
              const prevIds = new Set(
                prevMeeting.roomOnlineUsers.map((u) => u.id)
              )
              const newIds = new Set(
                updatedMeeting.roomOnlineUsers.map((u) => u.id)
              )

              if (prevIds.size !== newIds.size) return true

              return Array.from(prevIds).some((id) => !newIds.has(id))
            }

            if (
              !prevMeeting ||
              prevMeeting.waitingParticipants !==
                updatedMeeting.waitingParticipants ||
              prevMeeting.participants?.length !==
                updatedMeeting.participants?.length ||
              prevMeeting.countOnlineUser !== updatedMeeting.countOnlineUser ||
              hasOnlineUsersChanged()
            ) {
              console.log('üìä Room data actually changed, updating...', {
                oldWaiting: prevMeeting?.waitingParticipants,
                newWaiting: updatedMeeting.waitingParticipants,
                oldParticipants: prevMeeting?.participants?.length,
                newParticipants: updatedMeeting.participants?.length,
                oldOnlineCount: prevMeeting?.countOnlineUser,
                newOnlineCount: updatedMeeting.countOnlineUser,
                oldOnlineUsers: prevMeeting?.roomOnlineUsers?.map((u) => u.id),
                newOnlineUsers: updatedMeeting.roomOnlineUsers?.map(
                  (u) => u.id
                ),
              })
              return updatedMeeting
            }
            console.log('‚ö° Room data same, skipping update')
            return prevMeeting
          })
        } else {
          console.error('Failed to fetch room data:', response.statusText)
        }
      } catch (error) {
        console.error('Error updating room data:', error)
      }
    },
    [] // –ë–ï–ó –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!
  )

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
  useEffect(() => {
    console.log('üîÑ Online status effect triggered:', {
      meetingId: meeting?.id,
      isOnline,
      timestamp: new Date().toISOString(),
    })

    if (meeting?.id && isOnline !== undefined) {
      console.log('‚è∞ Setting timer to update room data in 500ms')
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      const timer = setTimeout(() => {
        console.log('‚è∞ Timer fired, updating room data now')
        updateRoomData(meeting.id)
      }, 500)

      return () => {
        console.log('‚è∞ Clearing timer')
        clearTimeout(timer)
      }
    }
  }, [isOnline, meeting?.id, updateRoomData])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç)
  const acceptInvitation = useCallback(
    async (joiningUserId: number, roomId: number) => {
      try {
        if (
          joiningUserId === undefined ||
          joiningUserId === null ||
          roomId === undefined ||
          roomId === null
        ) {
          console.warn('‚ö†Ô∏è acceptInvitation invalid params:', {
            joiningUserId,
            roomId,
          })
          return { success: false, error: 'Invalid userId or roomId' }
        }

        console.log('üöÄ Auto-accept ‚Üí PUT /adminRoom/accept', {
          userId: joiningUserId,
          roomId,
          timestamp: new Date().toISOString(),
        })

        const response = await fetch(
          `http://localhost:8080/api/room/adminRoom/accept?userId=${joiningUserId}&roomId=${roomId}`,
          {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
          }
        )

        console.log('üì° Auto-accept response:', {
          status: response.status,
          statusText: response.statusText,
        })

        if (response.ok) {
          return { success: true }
        } else if (response.status === 409) {
          // 409 Conflict –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –ø—Ä–∏–Ω—è—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
          console.log('Participant already accepted, proceeding')
          return { success: true, alreadyAccepted: true }
        } else {
          console.error('Failed to accept invitation:', response.statusText)
          return { success: false, error: response.statusText }
        }
      } catch (error) {
        console.error('Error accepting invitation:', error)
        return {
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error',
        }
      }
    },
    []
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º
  const handleAuthRedirect = useCallback(() => {
    const currentPath = window.location.pathname
    navigate(`/signin?returnTo=${encodeURIComponent(currentPath)}`)
  }, [navigate])

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
  const joinRoom = useCallback(async () => {
    if (!meeting || !userId || !isAuthenticated || isJoiningRoom) return

    setIsJoiningRoom(true)
    setJoinRequestStatus('pending')
    setJoinError(null)

    try {
      // –î–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ >= 3
      if (!meeting.privateRoom) {
        const userRating = typeof rating === 'number' ? rating : null
        if (userRating !== null && userRating < 3) {
          setJoinRequestStatus('none')
          setIsJoiningRoom(false)
          setJoinError(
            t(
              'meetingChat.ratingTooLow',
              '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–±–ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ (–Ω—É–∂–Ω–æ 3+).'
            )
          )
          return
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Redux
      console.log('üì® sendJoinRequest dispatch ‚Üí', {
        roomId: meeting.id,
        userId,
        isPublic: !meeting.privateRoom,
        rating,
        storeUserParticipationBefore: (userParticipations || {})[meeting.id],
      })
      const result = await dispatch(
        sendJoinRequest({
          roomId: meeting.id,
          userId: userId,
        })
      )

      if (sendJoinRequest.fulfilled.match(result)) {
        console.log('‚úÖ sendJoinRequest fulfilled. Payload:', result.payload)

        // –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ Redux
        const { participant } = result.payload
        console.log('üß© participant parsed from payload:', participant)

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const status = participant.status?.toLowerCase()
        if (
          status === 'pending' ||
          status === 'accepted' ||
          status === 'rejected'
        ) {
          setJoinRequestStatus(status)
        } else {
          setJoinRequestStatus('pending')
        }

        // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É–±–ª–∏—á–Ω–∞—è, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
        if (!meeting.privateRoom) {
          const acceptedCount = (meeting.participants || []).filter(
            (p) => p.status === 'ACCEPTED'
          ).length
          const max = meeting.maxParticipants || 0
          const hasCapacity = max === 0 || acceptedCount < max
          console.log('üîé Auto-accept pre-check:', {
            acceptedCount,
            maxParticipants: meeting.maxParticipants,
            hasCapacity,
            payloadParticipantUserId: participant?.user?.id,
          })
          try {
            const requestingUserId = (participant?.user?.id ?? userId) as
              | number
              | undefined
            if (requestingUserId === undefined) {
              console.warn('‚ö†Ô∏è No userId resolved for auto-accept; skipping')
            }
            const acceptResult =
              hasCapacity && requestingUserId !== undefined
                ? await acceptInvitation(requestingUserId, meeting.id)
                : { success: false }

            if (acceptResult.success) {
              setJoinRequestStatus('accepted')
              setHasJoinedRoom(true)
              console.log('Auto-accepted for public room')
            } else {
              console.log(
                'Auto-accept failed or capacity reached, pending state'
              )
            }
          } catch (acceptError) {
            console.log('Auto-accept error:', acceptError)
            // –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ pending, —á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await updateRoomData(meeting.id)
      } else if (sendJoinRequest.rejected.match(result)) {
        console.error('‚ùå sendJoinRequest rejected:', result.error)
        setJoinRequestStatus('rejected')
      }
    } catch (error) {
      console.error('Unexpected error in joinRoom:', error)
      setJoinRequestStatus('rejected')
    } finally {
      setIsJoiningRoom(false)
    }
  }, [
    meeting,
    userId,
    isAuthenticated,
    isJoiningRoom,
    dispatch,
    acceptInvitation,
    updateRoomData, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    rating,
    t,
    userParticipations,
  ])

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±—ç–∫–µ–Ω–¥–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  const fetchUserRoomStatus = useCallback(
    async (targetUserId: number, targetRoomId: number) => {
      try {
        console.log('üîé Fetching user room statuses', {
          userId: targetUserId,
          roomId: targetRoomId,
        })
        const resp = await fetch(
          `http://localhost:8080/api/room/roomStatus?userId=${targetUserId}`
        )
        if (!resp.ok) {
          console.warn(
            'roomStatus response not ok:',
            resp.status,
            resp.statusText
          )
          setBackendJoinStatus(null)
          return
        }
        const data: Array<{
          room?: { id?: number }
          status?: string
          type?: string
        }> = await resp.json()
        const entry = (data || []).find((r) => r.room?.id === targetRoomId)
        const status = entry?.status?.toUpperCase() as
          | 'PENDING'
          | 'ACCEPTED'
          | 'DECLINED'
          | undefined
        console.log('üîé roomStatus matched entry:', entry)
        setBackendJoinStatus(status ?? null)
      } catch (e) {
        console.error('Failed to fetch user roomStatus:', e)
        setBackendJoinStatus(null)
      }
    },
    []
  )

  // –¢—Ä–∏–≥–µ—Ä–∏–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–Ω–∞—Ç—ã
  useEffect(() => {
    if (isAuthenticated && userId && meeting?.id) {
      fetchUserRoomStatus(userId, meeting.id)
    } else {
      setBackendJoinStatus(null)
    }
  }, [isAuthenticated, userId, meeting?.id, fetchUserRoomStatus])

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    console.log('User changed, resetting local join states')
    setJoinRequestStatus('none')
    setHasJoinedRoom(false)
    setIsJoiningRoom(false)
    setJoinError(null)
  }, [userId])

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (meeting?.id && isOrganizer) {
      setHasJoinedRoom(true)
      setJoinRequestStatus('accepted')
      setIsJoiningRoom(false)
    } else if (backendJoinStatus) {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å —Å –±—ç–∫–µ–Ω–¥–∞, –µ—Å–ª–∏ –æ–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω
      const normalized = backendJoinStatus.toUpperCase()
      if (normalized === 'PENDING') {
        setJoinRequestStatus('pending')
        setIsJoiningRoom(false)
        setHasJoinedRoom(false)
        console.log('Set status to PENDING (backend)')
      } else if (normalized === 'ACCEPTED') {
        setJoinRequestStatus('accepted')
        setHasJoinedRoom(true)
        setIsJoiningRoom(false)
        console.log('Set status to ACCEPTED (backend)')
      } else if (normalized === 'DECLINED') {
        setJoinRequestStatus('rejected')
        setIsJoiningRoom(false)
        setHasJoinedRoom(false)
        console.log('Set status to REJECTED (backend)')
      }
    } else if (userParticipation) {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞—è–≤–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
      console.log(
        'Setting status based on userParticipation:',
        userParticipation
      )
      if (userParticipation.status === 'PENDING') {
        setJoinRequestStatus('pending')
        setIsJoiningRoom(false) // –£–±–∏—Ä–∞–µ–º –ª–æ–∞–¥–µ—Ä
        setHasJoinedRoom(false)
        console.log('Set status to PENDING')
      } else if (isAcceptedParticipant) {
        setJoinRequestStatus('accepted')
        setHasJoinedRoom(true)
        setIsJoiningRoom(false)
        console.log('Set status to ACCEPTED')
      } else if (userParticipation.status === 'REJECTED') {
        setJoinRequestStatus('rejected')
        setIsJoiningRoom(false)
        setHasJoinedRoom(false)
        console.log('Set status to REJECTED')
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–∫–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (!isJoiningRoom) {
        console.log('No user participation found, resetting statuses')
        setJoinRequestStatus('none')
        setHasJoinedRoom(false)
      }
    }
  }, [
    meeting?.id,
    isOrganizer,
    userParticipation,
    isJoiningRoom,
    isAcceptedParticipant,
    backendJoinStatus,
  ]) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ meeting?.id

  // –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date())
    }, 1000)

    return () => clearInterval(timer)
  }, [])

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç—ã (–±–µ–∑ POST –∑–∞–ø—Ä–æ—Å–æ–≤)
  useEffect(() => {
    console.log('üìã First useEffect triggered:', {
      meetingId,
      roomsLength: rooms.length,
      navigate: typeof navigate,
    })

    if (!meetingId || !rooms.length) {
      setIsLoadingMeeting(true)
      return
    }

    // –ò—â–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ id –∏–ª–∏ slug
    const room = rooms.find(
      (room) =>
        room.id.toString() === meetingId ||
        room.topic
          .toLowerCase()
          .replace(/\s+/g, '-')
          .replace(/[^a-z0-9-]/g, '') === meetingId
    )

    if (room) {
      console.log('üè† Found room, loading fresh data for:', room.id)

      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const updateMeetingData = async () => {
        setIsLoadingMeeting(true)
        try {
          const response = await fetch(
            `http://localhost:8080/api/room/id?roomId=${room.id}`
          )
          if (response.ok) {
            const updatedRoom = await response.json()
            const updatedMeeting = mapApiRoomToMeeting(updatedRoom)
            console.log('üìä Setting meeting data once:', updatedMeeting.id)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–∏—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤)
            setMeeting((prevMeeting) => {
              if (!prevMeeting || prevMeeting.id !== updatedMeeting.id) {
                console.log('üîÑ Meeting data actually changed, updating...')
                return updatedMeeting
              }
              console.log('‚ö° Meeting data same, skipping update')
              return prevMeeting
            })
          } else {
            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ rooms –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            console.log('üìä Using fallback room data')
            const mappedMeeting = mapApiRoomToMeeting(room)
            setMeeting((prevMeeting) => {
              if (!prevMeeting || prevMeeting.id !== mappedMeeting.id) {
                return mappedMeeting
              }
              return prevMeeting
            })
          }
        } catch (error) {
          console.error('‚ùå Error loading room data, using fallback:', error)
          // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ rooms
          const mappedMeeting = mapApiRoomToMeeting(room)
          setMeeting((prevMeeting) => {
            if (!prevMeeting || prevMeeting.id !== mappedMeeting.id) {
              return mappedMeeting
            }
            return prevMeeting
          })
        } finally {
          setIsLoadingMeeting(false)
        }
      }
      updateMeetingData()
    } else {
      // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å—Ç—Ä–µ—á
      console.log('‚ùå Room not found, redirecting to meetings')
      setIsLoadingMeeting(false)
      navigate('/meetings')
    }
  }, [meetingId, rooms, navigate])

  // –£–±—Ä–∞–ª–∏ POST –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—É - —Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞

  // –£–±—Ä–∞–ª–∏ –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ leave –∑–∞–ø—Ä–æ—Å–æ–≤ - —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω–∞ —Ä–∞–∑ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã (–ë–ï–ó POST –∑–∞–ø—Ä–æ—Å–æ–≤)
  useEffect(() => {
    if (!meeting?.id) return

    console.log('‚è±Ô∏è Starting periodic updates for room:', meeting.id)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    const interval = setInterval(() => {
      console.log(
        '‚è±Ô∏è Periodic update triggered for room:',
        meetingIdRef.current
      )
      updateRoomData() // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ–Ω–∞ —Å–∞–º–∞ –≤–æ–∑—å–º–µ—Ç ID –∏–∑ ref
    }, 30000)

    return () => {
      console.log('‚è±Ô∏è Stopping periodic updates for room:', meeting.id)
      clearInterval(interval)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [meeting?.id]) // updateRoomData –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ useCallback –±–µ–∑ deps

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É
  const checkChatAccess = () => {
    if (!meeting)
      return {
        hasAccess: false,
        reasons: [],
        minutesUntilStart: 0,
        conditions: {},
      }

    const startTime = meeting.startTime
      ? parseISO(meeting.startTime)
      : new Date()
    const minutesUntilStart = differenceInMinutes(startTime, currentTime)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ quantityParticipant —Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é
    const waitingParticipants = meeting.waitingParticipants || 0
    const minParticipants = meeting.minParticipants || 4

    const conditions = {
      timeCondition: minutesUntilStart <= 5, // –ó–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
      waitingCondition: waitingParticipants >= minParticipants, // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–∂–∏–¥–∞—é—â–∏—Ö
      activeCondition: activeParticipants >= minParticipants, // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    }

    const reasons = [
      {
        type: 'time',
        message: t(
          'meetingChat.waitingConditions.timeCondition',
          'Meeting opens 5 minutes before start'
        ),
        met: conditions.timeCondition,
      },
      {
        type: 'waiting',
        message: t(
          'meetingChat.waitingConditions.waitingCondition',
          'Need {{min}} waiting participants, have {{current}}',
          {
            min: minParticipants,
            current: waitingParticipants,
          }
        ),
        met: conditions.waitingCondition,
      },
      {
        type: 'active',
        message: t(
          'meetingChat.waitingConditions.activeCondition',
          'Need {{min}} active participants, have {{current}}',
          {
            min: minParticipants,
            current: activeParticipants,
          }
        ),
        met: conditions.activeCondition,
      },
    ]

    return {
      hasAccess:
        conditions.timeCondition &&
        conditions.waitingCondition &&
        conditions.activeCondition,
      reasons,
      minutesUntilStart,
      conditions,
    }
  }

  const chatAccess = checkChatAccess()

  if (isLoading || isLoadingMeeting) {
    return <Loader />
  }

  if (!meeting) {
    return (
      <Container>
        <Typography variant="h6" color="text.primary">
          {t('meetings.error.title')}
        </Typography>
      </Container>
    )
  }

  const formattedStartTime = meeting.startTime
    ? format(parseISO(meeting.startTime), 'dd.MM.yyyy HH:mm')
    : 'Invalid date'
  const formattedEndTime = meeting.endTime
    ? format(parseISO(meeting.endTime), 'dd.MM.yyyy HH:mm')
    : 'Invalid date'

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ—á–∞—Ç—É
  const renderWaitingOverlay = () => {
    if (chatAccess.hasAccess) return null

    const startTime = meeting.startTime
      ? parseISO(meeting.startTime)
      : new Date()
    const secondsUntilStart = differenceInSeconds(startTime, currentTime)

    const formatTime = (seconds: number) => {
      if (seconds < 0) return '00:00:00'
      const hours = Math.floor(seconds / 3600)
      const mins = Math.floor((seconds % 3600) / 60)
      const secs = seconds % 60
      return `${hours.toString().padStart(2, '0')}:${mins
        .toString()
        .padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
    }

    return (
      <Box
        sx={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(255, 255, 255, 0.95)',
          backdropFilter: 'blur(20px)',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 10,
          borderRadius: 3,
        }}
      >
        <Paper
          elevation={8}
          sx={{
            p: 4,
            borderRadius: 3,
            textAlign: 'center',
            maxWidth: 500,
            width: '90%',
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            color: 'white',
          }}
        >
          <Lock size={48} style={{ marginBottom: 16, opacity: 0.8 }} />

          <Typography variant="h5" fontWeight="600" gutterBottom>
            {t('meetingChat.waitingTitle', 'Meeting Room Locked')}
          </Typography>

          <Typography variant="body1" sx={{ mb: 3, opacity: 0.9 }}>
            {t(
              'meetingChat.waitingDescription',
              'The video chat will be available when all conditions are met'
            )}
          </Typography>

          {/* –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ */}
          <Box
            sx={{
              mb: 3,
              p: 2,
              backgroundColor: 'rgba(255, 255, 255, 0.1)',
              borderRadius: 2,
            }}
          >
            <Typography variant="body2" sx={{ mb: 1, opacity: 0.8 }}>
              {t('meetingChat.timeUntilStart', 'Time until meeting starts:')}
            </Typography>
            <Typography variant="h4" fontWeight="600" fontFamily="monospace">
              {formatTime(secondsUntilStart)}
            </Typography>
          </Box>

          {/* –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç—É–ø–∞ */}
          <Box sx={{ textAlign: 'left' }}>
            <Typography variant="h6" sx={{ mb: 2, textAlign: 'center' }}>
              {t('meetingChat.conditionsTitle', 'Required Conditions:')}
            </Typography>

            {chatAccess.reasons.map((reason, index) => (
              <Box
                key={index}
                sx={{
                  display: 'flex',
                  alignItems: 'center',
                  mb: 1,
                  p: 1.5,
                  backgroundColor: reason.met
                    ? 'rgba(76, 175, 80, 0.15)'
                    : 'rgba(255, 193, 7, 0.1)',
                  border: `1px solid ${
                    reason.met
                      ? 'rgba(76, 175, 80, 0.35)'
                      : 'rgba(255, 193, 7, 0.35)'
                  }`,
                  borderRadius: 1,
                }}
              >
                {reason.met ? (
                  <CheckCircle
                    size={20}
                    style={{ marginRight: 8, color: '#4caf50' }}
                  />
                ) : (
                  <AlertCircle
                    size={20}
                    style={{ marginRight: 8, color: '#ff9800' }}
                  />
                )}
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  {reason.message}
                </Typography>
              </Box>
            ))}
          </Box>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ */}
          {(chatAccess.minutesUntilStart || 0) > 5 && (
            <Box sx={{ mt: 3 }}>
              <Typography variant="body2" sx={{ mb: 1, opacity: 0.8 }}>
                {t(
                  'meetingChat.timeProgress',
                  'Opens in 5 minutes before start'
                )}
              </Typography>
              <LinearProgress
                variant="determinate"
                value={Math.max(
                  0,
                  100 - ((chatAccess.minutesUntilStart || 0) / 60) * 100
                )}
                sx={{
                  height: 8,
                  borderRadius: 4,
                  backgroundColor: 'rgba(255, 255, 255, 0.2)',
                  '& .MuiLinearProgress-bar': {
                    backgroundColor: '#4caf50',
                    borderRadius: 4,
                  },
                }}
              />
            </Box>
          )}
        </Paper>
      </Box>
    )
  }

  return (
    <Container>
      <Box sx={containerStyle}>
        {/* Header */}
        <Box sx={headerStyle}>
          <Box
            sx={{
              display: 'flex',
              alignItems: 'center',
              gap: 2,
              flexWrap: 'wrap',
            }}
          >
            <Typography variant="h4" component="h1" color="text.primary">
              {meeting.name}
            </Typography>
            <Tooltip
              title={
                meeting.privateRoom
                  ? t(
                      'meetingCard.privateRoomDescription',
                      'Requires organizer approval to join'
                    )
                  : t(
                      'meetingCard.publicRoomDescription',
                      'Anyone can join immediately'
                    )
              }
              arrow
              placement="top"
            >
              <Chip
                icon={
                  meeting.privateRoom ? <Lock size={16} /> : <Users size={16} />
                }
                label={
                  meeting.privateRoom
                    ? t('meetingCard.privateRoom', 'Private Room')
                    : t('meetingCard.publicRoom', 'Public Room')
                }
                size="medium"
                sx={{
                  backgroundColor: meeting.privateRoom
                    ? 'rgba(255, 107, 107, 0.1)'
                    : 'rgba(81, 207, 102, 0.1)',
                  color: meeting.privateRoom ? '#ff6b6b' : '#51cf66',
                  border: `1px solid ${
                    meeting.privateRoom
                      ? 'rgba(255, 107, 107, 0.3)'
                      : 'rgba(81, 207, 102, 0.3)'
                  }`,
                  fontWeight: '500',
                  cursor: 'help',
                  '& .MuiChip-icon': {
                    color: meeting.privateRoom ? '#ff6b6b' : '#51cf66',
                  },
                  '&:hover': {
                    backgroundColor: meeting.privateRoom
                      ? 'rgba(255, 107, 107, 0.15)'
                      : 'rgba(81, 207, 102, 0.15)',
                  },
                }}
              />
            </Tooltip>
          </Box>
          {meeting.description && (
            <Typography variant="body1" color="text.secondary" sx={{ mt: 1 }}>
              {meeting.description}
            </Typography>
          )}
        </Box>

        {/* Meeting Info Cards */}
        <Box
          sx={{
            display: 'grid',
            gridTemplateColumns: isMobile
              ? '1fr'
              : 'repeat(auto-fit, minmax(280px, 1fr))',
            gap: 3,
            mb: 4,
          }}
        >
          {/* Time Card */}
          <Card
            elevation={2}
            sx={{
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white',
              '&:hover': {
                transform: 'translateY(-2px)',
                transition: 'transform 0.2s ease-in-out',
              },
            }}
          >
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <Clock size={24} style={{ marginRight: 8 }} />
                <Typography variant="h6" component="h3" fontWeight="600">
                  {t('meetingCard.timeLabel')}
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Typography
                    variant="body2"
                    sx={{ opacity: 0.9, minWidth: '60px' }}
                  >
                    {t('meetingCard.startTimeLabel')}
                  </Typography>
                  <Typography variant="body1" fontWeight="500">
                    {formattedStartTime}
                  </Typography>
                </Box>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Typography
                    variant="body2"
                    sx={{ opacity: 0.9, minWidth: '60px' }}
                  >
                    {t('meetingCard.endTimeLabel')}
                  </Typography>
                  <Typography variant="body1" fontWeight="500">
                    {formattedEndTime}
                  </Typography>
                </Box>
                {meeting.duration && (
                  <Box
                    sx={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: 1,
                      mt: 1,
                      pt: 1,
                      borderTop: '1px solid rgba(255,255,255,0.2)',
                    }}
                  >
                    <Timer size={16} />
                    <Typography variant="body2" sx={{ opacity: 0.9 }}>
                      {t('meetingCard.durationLabel')}
                    </Typography>
                    <Typography variant="body1" fontWeight="500">
                      {meeting.duration}
                    </Typography>
                  </Box>
                )}
              </Box>
            </CardContent>
          </Card>

          {/* Participants Card */}
          <Card
            elevation={2}
            sx={{
              background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
              color: 'white',
              '&:hover': {
                transform: 'translateY(-2px)',
                transition: 'transform 0.2s ease-in-out',
              },
            }}
          >
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <Users size={24} style={{ marginRight: 8 }} />
                <Typography variant="h6" component="h3" fontWeight="600">
                  {t('meetingCard.participantsLabel')}
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                <Box
                  sx={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                  }}
                >
                  <Typography variant="body2" sx={{ opacity: 0.9 }}>
                    {t('meetingCard.minParticipantsLabel')}
                  </Typography>
                  <Typography variant="h5" fontWeight="600">
                    {meeting.minParticipants}
                  </Typography>
                </Box>
                {meeting.maxParticipants && (
                  <Box
                    sx={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                    }}
                  >
                    <Typography variant="body2" sx={{ opacity: 0.9 }}>
                      {t('meetingCard.maxParticipantsLabel')}
                    </Typography>
                    <Typography variant="h5" fontWeight="600">
                      {meeting.maxParticipants}
                    </Typography>
                  </Box>
                )}
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
                {meeting.waitingParticipants !== undefined &&
                  meeting.waitingParticipants > 0 && (
                    <Box
                      sx={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        mt: 1,
                        pt: 1,
                        borderTop: '1px solid rgba(255,255,255,0.2)',
                      }}
                    >
                      <Typography variant="body2" sx={{ opacity: 0.9 }}>
                        {t('meetingCard.waitingParticipantsLabel')}
                      </Typography>
                      <Typography variant="h5" fontWeight="600">
                        {meeting.waitingParticipants}
                      </Typography>
                    </Box>
                  )}
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
                {onlineUsersCount > 0 && (
                  <>
                    <Box
                      sx={{
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        mt: 1,
                        pt: 1,
                        borderTop: '1px solid rgba(255,255,255,0.2)',
                      }}
                    >
                      <Typography variant="body2" sx={{ opacity: 0.9 }}>
                        {t('meetingCard.onlineParticipantsLabel', '–û–Ω–ª–∞–π–Ω:')}
                      </Typography>
                      <Typography variant="h5" fontWeight="600">
                        {onlineUsersCount}
                      </Typography>
                    </Box>
                    {/* –ê–≤–∞—Ç–∞—Ä—ã –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
                    {onlineUsers && onlineUsers.length > 0 && (
                      <Box
                        sx={{
                          display: 'flex',
                          flexWrap: 'wrap',
                          gap: 1,
                          mt: 1,
                          pt: 1,
                          alignItems: 'center',
                        }}
                      >
                        {onlineUsers.slice(0, 6).map((user) => (
                          <Tooltip
                            key={user.id}
                            title={
                              user.nickname || user.name || `User ${user.id}`
                            }
                            arrow
                          >
                            <Box
                              sx={{
                                width: 32,
                                height: 32,
                                borderRadius: '50%',
                                overflow: 'hidden',
                                border: '2px solid rgba(255,255,255,0.3)',
                                background: 'rgba(255,255,255,0.1)',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                cursor: 'pointer',
                                '&:hover': {
                                  border: '2px solid rgba(255,255,255,0.6)',
                                },
                              }}
                            >
                              {user.avatar ? (
                                <img
                                  src={`http://localhost:8080/api/users/avatar/${user.avatar}`}
                                  alt={`${
                                    user.nickname || user.name || user.id
                                  } avatar`}
                                  style={{
                                    width: '100%',
                                    height: '100%',
                                    objectFit: 'cover',
                                  }}
                                />
                              ) : (
                                <Users size={16} color="white" />
                              )}
                            </Box>
                          </Tooltip>
                        ))}
                        {onlineUsers.length > 6 && (
                          <Typography
                            variant="body2"
                            sx={{ opacity: 0.7, ml: 1 }}
                          >
                            +{onlineUsers.length - 6}
                          </Typography>
                        )}
                      </Box>
                    )}
                  </>
                )}
                {/* –ò–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                {(userParticipation ||
                  isOrganizer ||
                  isAcceptedParticipant ||
                  joinRequestStatus === 'accepted' ||
                  resolvedJoinStatus) && (
                  <Box
                    sx={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: 1,
                      mt: 1,
                      pt: 1,
                      borderTop: '1px solid rgba(255,255,255,0.2)',
                      backgroundColor: isOrganizer
                        ? 'rgba(255, 193, 7, 0.2)'
                        : (resolvedJoinStatus || userParticipation?.status) ===
                          'PENDING'
                        ? 'rgba(255, 193, 7, 0.2)'
                        : (resolvedJoinStatus || userParticipation?.status) ===
                          'ACCEPTED'
                        ? 'rgba(76, 175, 80, 0.2)'
                        : 'rgba(76, 175, 80, 0.2)',
                      borderRadius: 1,
                      px: 1,
                      py: 0.5,
                    }}
                  >
                    {isOrganizer ? (
                      <>
                        <Crown size={16} style={{ color: '#ffc107' }} />
                        <Typography variant="body2" sx={{ fontWeight: '500' }}>
                          {t('meetingChat.organizer', '–í—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä')}
                        </Typography>
                      </>
                    ) : (resolvedJoinStatus || userParticipation?.status) ===
                      'PENDING' ? (
                      <>
                        <Timer size={16} style={{ color: '#ff9800' }} />
                        <Typography variant="body2" sx={{ fontWeight: '500' }}>
                          {t('meetingChat.requestPending', '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')}
                        </Typography>
                      </>
                    ) : (
                      <>
                        <CheckCircle size={16} style={{ color: '#4caf50' }} />
                        <Typography variant="body2" sx={{ fontWeight: '500' }}>
                          {(resolvedJoinStatus || userParticipation?.status) ===
                            'ACCEPTED' ||
                          isAcceptedParticipant ||
                          joinRequestStatus === 'accepted'
                            ? t('meetingChat.requestAccepted', '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')
                            : t(
                                'meetingChat.joinedWaitingRoom',
                                '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ–∂–∏–¥–∞–Ω–∏—é'
                              )}
                        </Typography>
                      </>
                    )}
                  </Box>
                )}
              </Box>
            </CardContent>
          </Card>

          {/* Category & Language Card */}
          <Card
            elevation={2}
            sx={{
              background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
              color: 'white',
              '&:hover': {
                transform: 'translateY(-2px)',
                transition: 'transform 0.2s ease-in-out',
              },
            }}
          >
            <CardContent sx={{ p: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <Tag size={24} style={{ marginRight: 8 }} />
                <Typography variant="h6" component="h3" fontWeight="600">
                  {t('meetingCard.categoryLabel')}
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                <Chip
                  label={meeting.category}
                  sx={{
                    backgroundColor: 'rgba(255,255,255,0.2)',
                    color: 'white',
                    fontWeight: '500',
                    border: '1px solid rgba(255,255,255,0.3)',
                    '&:hover': {
                      backgroundColor: 'rgba(255,255,255,0.3)',
                    },
                  }}
                  size="medium"
                />
                <Box
                  sx={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: 1,
                    pt: 1,
                    borderTop: '1px solid rgba(255,255,255,0.2)',
                  }}
                >
                  <Globe size={16} />
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                    <Chip
                      label={meeting.language}
                      size="small"
                      sx={{
                        backgroundColor: 'rgba(255,255,255,0.15)',
                        color: 'white',
                        border: '1px solid rgba(255,255,255,0.3)',
                        fontSize: '0.75rem',
                      }}
                    />
                    {meeting.proficiency && (
                      <Chip
                        label={meeting.proficiency}
                        size="small"
                        sx={{
                          backgroundColor: 'rgba(255,255,255,0.15)',
                          color: 'white',
                          border: '1px solid rgba(255,255,255,0.3)',
                          fontSize: '0.75rem',
                        }}
                      />
                    )}
                  </Box>
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Box>

        <Divider sx={{ my: 3 }} />

        {/* Video Area or Join Button */}
        {hasJoinedRoom ||
        isOrganizer ||
        isAcceptedParticipant ||
        joinRequestStatus === 'accepted' ||
        (userParticipation && userParticipation.status === 'ACCEPTED') ? (
          <Box sx={chatContainerStyle}>
            <Box sx={{ ...videoAreaStyle, position: 'relative' }}>
              <VideoChat
                roomUrl={meeting.roomUrl}
                canConnect={chatAccess.hasAccess}
              />
              {!chatAccess.hasAccess && renderWaitingOverlay()}
            </Box>
          </Box>
        ) : !isAuthenticated ? (
          // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          <Box sx={chatContainerStyle}>
            <Box
              sx={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                minHeight: '400px',
                gap: 3,
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                borderRadius: 3,
                color: 'white',
                textAlign: 'center',
                p: 4,
              }}
            >
              <Lock size={64} style={{ opacity: 0.8 }} />
              <Typography variant="h4" fontWeight="600">
                {t('meetingChat.authRequired', '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')}
              </Typography>
              <Typography
                variant="body1"
                sx={{ opacity: 0.9, maxWidth: 500, lineHeight: 1.6 }}
              >
                {t(
                  'meetingChat.authRequiredDescription',
                  '–¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≤–∏–¥–µ–æ–∫–æ–º–Ω–∞—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≤—Å—Ç—Ä–µ—á–µ.'
                )}
              </Typography>
              <Button
                variant="contained"
                size="large"
                onClick={handleAuthRedirect}
                startIcon={<Lock size={20} />}
                sx={{
                  mt: 2,
                  px: 4,
                  py: 1.5,
                  fontSize: '1.1rem',
                  fontWeight: '600',
                  backgroundColor: 'rgba(255,255,255,0.2)',
                  color: 'white',
                  border: '2px solid rgba(255,255,255,0.3)',
                  '&:hover': {
                    backgroundColor: 'rgba(255,255,255,0.3)',
                    border: '2px solid rgba(255,255,255,0.5)',
                  },
                }}
              >
                {t('meetingChat.authButton', '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')}
              </Button>
            </Box>
          </Box>
        ) : (
          <Box sx={chatContainerStyle}>
            <Box
              sx={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                minHeight: '400px',
                gap: 3,
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                borderRadius: 3,
                color: 'white',
                textAlign: 'center',
                p: 4,
              }}
            >
              {/* Join Status Display */}
              {(joinRequestStatus === 'pending' ||
                (userParticipation &&
                  userParticipation.status === 'PENDING')) && (
                <Box
                  sx={{
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    gap: 2,
                  }}
                >
                  {userParticipation &&
                  userParticipation.status === 'PENDING' ? (
                    <CheckCircle size={48} style={{ color: '#4caf50' }} />
                  ) : (
                    <CircularProgress color="inherit" size={48} />
                  )}
                  <Typography variant="h5" fontWeight="600">
                    {userParticipation && userParticipation.status === 'PENDING'
                      ? t('meetingChat.requestSent', '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
                      : meeting.privateRoom
                      ? t(
                          'meetingChat.waitingApproval',
                          'Waiting for approval...'
                        )
                      : t('meetingChat.joiningRoom', 'Joining room...')}
                  </Typography>
                  <Typography variant="body1" sx={{ opacity: 0.9 }}>
                    {userParticipation && userParticipation.status === 'PENDING'
                      ? t(
                          'meetingChat.requestSentDescription',
                          '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã.'
                        )
                      : meeting.privateRoom
                      ? t(
                          'meetingChat.waitingApprovalDescription',
                          'The organizer will approve your request shortly'
                        )
                      : t(
                          'meetingChat.joiningRoomDescription',
                          'Please wait while we connect you to the room'
                        )}
                  </Typography>
                </Box>
              )}

              {joinRequestStatus === 'rejected' && (
                <Box
                  sx={{
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    gap: 2,
                  }}
                >
                  <AlertCircle size={48} style={{ color: '#ff6b6b' }} />
                  <Typography variant="h5" fontWeight="600">
                    {t('meetingChat.joinFailed', 'Join Request Failed')}
                  </Typography>
                  <Typography variant="body1" sx={{ opacity: 0.9 }}>
                    {t(
                      'meetingChat.joinFailedDescription',
                      'Unable to join the room. Please try again.'
                    )}
                  </Typography>
                </Box>
              )}

              {(joinRequestStatus === 'none' ||
                joinRequestStatus === 'rejected') &&
                !userParticipation && (
                  <Box
                    sx={{
                      display: 'flex',
                      flexDirection: 'column',
                      alignItems: 'center',
                      gap: 2,
                    }}
                  >
                    <Users size={64} style={{ opacity: 0.8 }} />
                    <Typography variant="h4" fontWeight="600">
                      {t('meetingChat.joinRoom', 'Join Video Chat')}
                    </Typography>
                    <Typography
                      variant="body1"
                      sx={{ opacity: 0.9, maxWidth: 400 }}
                    >
                      {meeting.privateRoom
                        ? t(
                            'meetingChat.privateRoomJoinDescription',
                            'This is a private room. Your request will be sent to the organizer for approval.'
                          )
                        : t(
                            'meetingChat.publicRoomJoinDescription',
                            'This is a public room. You can join the video chat immediately.'
                          )}
                    </Typography>
                    {joinError && (
                      <Typography variant="body2" color="error" sx={{ mt: 1 }}>
                        {joinError}
                      </Typography>
                    )}
                    <Button
                      variant="contained"
                      size="large"
                      onClick={joinRoom}
                      disabled={isJoiningRoom || Boolean(joinError)}
                      startIcon={
                        isJoiningRoom ? (
                          <CircularProgress size={20} />
                        ) : (
                          <Users size={20} />
                        )
                      }
                      sx={{
                        mt: 2,
                        px: 4,
                        py: 1.5,
                        fontSize: '1.1rem',
                        fontWeight: '600',
                        backgroundColor: 'rgba(255,255,255,0.2)',
                        color: 'white',
                        border: '2px solid rgba(255,255,255,0.3)',
                        '&:hover': {
                          backgroundColor: 'rgba(255,255,255,0.3)',
                          border: '2px solid rgba(255,255,255,0.5)',
                        },
                        '&:disabled': {
                          backgroundColor: 'rgba(255,255,255,0.1)',
                          color: 'rgba(255,255,255,0.6)',
                        },
                      }}
                    >
                      {isJoiningRoom
                        ? t('meetingChat.joiningButton', 'Joining...')
                        : t('meetingChat.joinButton', 'Join Room')}
                    </Button>
                  </Box>
                )}
            </Box>
          </Box>
        )}
      </Box>
    </Container>
  )
}

export default MeetingChat
