import { useEffect, useRef, useCallback, useState } from 'react'

interface UseRoomOnlineStatusOptions {
  roomId?: number
  userId?: number | null
  isAuthenticated: boolean
  enabled?: boolean // –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å —Ö—É–∫
}

export function useRoomOnlineStatus({
  roomId,
  userId,
  isAuthenticated,
  enabled = true,
}: UseRoomOnlineStatusOptions) {
  const hasJoinedRef = useRef(false)
  const currentRoomIdRef = useRef<number | null>(null)
  const currentUserIdRef = useRef<number | null>(null)
  const isAuthenticatedRef = useRef(isAuthenticated)
  const [isOnline, setIsOnline] = useState(false)
  const tabIdRef = useRef(Math.random().toString(36).substr(2, 9)) // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤–∫–ª–∞–¥–∫–∏

  // –û–±–Ω–æ–≤–ª—è–µ–º refs –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π
  useEffect(() => {
    isAuthenticatedRef.current = isAuthenticated
    currentUserIdRef.current = userId || null
  }, [isAuthenticated, userId])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—É
  const joinOnline = useCallback(async (roomId: number, userId: number) => {
    try {
      console.log('üîç Checking if can join room online:', {
        roomId,
        userId,
        tabId: tabIdRef.current,
        localStorageKey: `room_online_${userId}_${roomId}`,
        timestamp: new Date().toISOString(),
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —É–∂–µ –¥—Ä—É–≥–∞—è –≤–∫–ª–∞–¥–∫–∞ –≠–¢–û–ì–û –ñ–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const activeTabData = localStorage.getItem(
        `room_online_${userId}_${roomId}`
      )
      if (activeTabData) {
        try {
          const { tabId, timestamp } = JSON.parse(activeTabData)
          const isExpired = Date.now() - timestamp > 30000 // 30 —Å–µ–∫—É–Ω–¥

          if (!isExpired && tabId !== tabIdRef.current) {
            console.log(
              '‚ö†Ô∏è Another tab is already active for this user in this room, skipping join',
              {
                userId,
                roomId,
                activeTabId: tabId,
                currentTabId: tabIdRef.current,
                timestamp: new Date(timestamp).toISOString(),
              }
            )
            return false
          }
        } catch (e) {
          console.log('Error parsing active tab data:', e)
        }
      }

      const url = `http://localhost:8080/api/room/online?userId=${userId}&roomId=${roomId}`

      console.log('üü¢ Sending POST request to join room online:', {
        roomId,
        userId,
        tabId: tabIdRef.current,
        url,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      })

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      })

      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
      let responseBody = null
      try {
        const responseText = await response.text()
        if (responseText) {
          responseBody = responseText
          try {
            responseBody = JSON.parse(responseText)
          } catch (e) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ JSON
          }
        }
      } catch (e) {
        console.log('Could not read response body:', e)
      }

      console.log('üì° POST response received:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        body: responseBody,
      })

      if (response.ok || response.status === 409) {
        // 409 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–Ω–ª–∞–π–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        console.log('‚úÖ Successfully joined room online', {
          status: response.status,
          roomId,
          userId,
          responseBody,
        })

        // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        console.log('üîç Checking room data immediately after POST...')
        try {
          const checkResponse = await fetch(
            `http://localhost:8080/api/room/id?roomId=${roomId}`
          )
          if (checkResponse.ok) {
            const roomData = await checkResponse.json()
            console.log('üìä Room data immediately after POST:', {
              roomId: roomData.id,
              countOnlineUser: roomData.countOnlineUser,
              roomOnlineUsers: roomData.roomOnlineUsers?.length || 0,
              roomOnlineUsersData: roomData.roomOnlineUsers,
            })
          }
        } catch (e) {
          console.log('‚ùå Error checking room data:', e)
        }

        hasJoinedRef.current = true
        currentRoomIdRef.current = roomId
        currentUserIdRef.current = userId
        setIsOnline(true)

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç—É –≤–∫–ª–∞–¥–∫—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
        const key = `room_online_${userId}_${roomId}`
        const data = {
          tabId: tabIdRef.current,
          timestamp: Date.now(),
        }
        localStorage.setItem(key, JSON.stringify(data))

        return true
      } else {
        console.error('‚ùå Failed to join room online:', {
          status: response.status,
          statusText: response.statusText,
          responseBody,
        })
        return false
      }
    } catch (error) {
      console.error('‚ùå Error joining room online:', error)
      return false
    }
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
  const leaveOnline = useCallback(async (forceBeacon = false) => {
    console.log('üî¥ leaveOnline called:', {
      hasJoinedRef: hasJoinedRef.current,
      currentRoomIdRef: currentRoomIdRef.current,
      currentUserIdRef: currentUserIdRef.current,
      stackTrace: new Error().stack,
    })

    if (
      !hasJoinedRef.current ||
      !currentRoomIdRef.current ||
      !currentUserIdRef.current
    ) {
      console.log('‚ùå leaveOnline: conditions not met, skipping')
      return
    }

    try {
      console.log('üî¥ Leaving room online:', {
        roomId: currentRoomIdRef.current,
        userId: currentUserIdRef.current,
        timestamp: new Date().toISOString(),
      })

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendBeacon –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const data = JSON.stringify({
        userId: currentUserIdRef.current,
        roomId: currentRoomIdRef.current,
      })

      const url = `http://localhost:8080/api/room/online?userId=${currentUserIdRef.current}&roomId=${currentRoomIdRef.current}`

      console.log('üîß DELETE request details:', {
        url,
        method: 'DELETE',
        data,
        hasBeacon: !!navigator.sendBeacon,
        forceBeacon,
        timestamp: new Date().toISOString(),
      })

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendBeacon —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –≤—ã–∑–æ–≤–µ (–∑–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
      if (forceBeacon && navigator.sendBeacon) {
        console.log('üì° Attempting sendBeacon DELETE:', {
          url,
          data,
          timestamp: new Date().toISOString(),
        })

        const success = navigator.sendBeacon(
          url,
          new Blob([data], { type: 'application/json' })
        )

        console.log('üì° sendBeacon result:', {
          success,
          timestamp: new Date().toISOString(),
        })

        if (success) {
          console.log('‚úÖ Successfully sent sendBeacon DELETE request')

          // sendBeacon –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
          setTimeout(async () => {
            try {
              console.log('üîç Checking room data after sendBeacon DELETE...')
              const checkResponse = await fetch(
                `http://localhost:8080/api/room/id?roomId=${currentRoomIdRef.current}`
              )
              if (checkResponse.ok) {
                const roomData = await checkResponse.json()
                console.log('üìä Room data after sendBeacon DELETE:', {
                  roomId: roomData.id,
                  countOnlineUser: roomData.countOnlineUser,
                  roomOnlineUsers: roomData.roomOnlineUsers?.length || 0,
                  roomOnlineUsersData: roomData.roomOnlineUsers,
                })
              }
            } catch (e) {
              console.log('‚ùå Error checking room data after sendBeacon:', e)
            }
          }, 1000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É

          hasJoinedRef.current = false
          currentRoomIdRef.current = null
          setIsOnline(false)
          return
        } else {
          console.log('‚ùå sendBeacon failed, trying fetch')
        }
      }

      // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π fetch
      console.log('üì° Attempting fetch DELETE:', {
        url,
        method: 'DELETE',
        data,
      })
      const response = await fetch(url, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: data,
      })

      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ DELETE
      let responseBody = null
      try {
        const responseText = await response.text()
        if (responseText) {
          responseBody = responseText
          try {
            responseBody = JSON.parse(responseText)
          } catch (e) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ JSON
          }
        }
      } catch (e) {
        console.log('Could not read DELETE response body:', e)
      }

      console.log('üì° DELETE response received:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        body: responseBody,
        headers: Object.fromEntries(response.headers.entries()),
      })

      if (response.ok) {
        console.log('‚úÖ Successfully left room online via fetch', {
          responseBody,
        })

        // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ DELETE –∑–∞–ø—Ä–æ—Å–∞
        console.log('üîç Checking room data immediately after DELETE...')
        try {
          const checkResponse = await fetch(
            `http://localhost:8080/api/room/id?roomId=${currentRoomIdRef.current}`
          )
          if (checkResponse.ok) {
            const roomData = await checkResponse.json()
            console.log('üìä Room data immediately after DELETE:', {
              roomId: roomData.id,
              countOnlineUser: roomData.countOnlineUser,
              roomOnlineUsers: roomData.roomOnlineUsers?.length || 0,
              roomOnlineUsersData: roomData.roomOnlineUsers,
            })
          }
        } catch (e) {
          console.log('‚ùå Error checking room data after DELETE:', e)
        }
      } else {
        console.error('‚ùå Failed to leave room online:', {
          status: response.status,
          statusText: response.statusText,
          responseBody,
        })
      }
    } catch (error) {
      console.error('‚ùå Error leaving room online:', error)
    } finally {
      hasJoinedRef.current = false

      // –£–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
      if (currentRoomIdRef.current && currentUserIdRef.current) {
        const key = `room_online_${currentUserIdRef.current}_${currentRoomIdRef.current}`
        const activeTabData = localStorage.getItem(key)

        if (activeTabData) {
          try {
            const { tabId } = JSON.parse(activeTabData)
            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—à–∞ –≤–∫–ª–∞–¥–∫–∞
            if (tabId === tabIdRef.current) {
              localStorage.removeItem(key)
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
          }
        }
      }

      currentRoomIdRef.current = null
      setIsOnline(false)
    }
  }, [])

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const prevValuesRef = useRef({ enabled, roomId, userId, isAuthenticated })

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    const prevValues = prevValuesRef.current
    const currentValues = { enabled, roomId, userId, isAuthenticated }

    console.log('üéØ useRoomOnlineStatus main useEffect triggered:', {
      ...currentValues,
      hasJoinedRef: hasJoinedRef.current,
      currentRoomIdRef: currentRoomIdRef.current,
      timestamp: new Date().toISOString(),
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      changes: {
        enabled: prevValues.enabled !== enabled,
        roomId: prevValues.roomId !== roomId,
        userId: prevValues.userId !== userId,
        isAuthenticated: prevValues.isAuthenticated !== isAuthenticated,
      },
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    prevValuesRef.current = currentValues

    if (!enabled || !roomId || !userId || userId === null || !isAuthenticated) {
      console.log(
        '‚ùå Conditions not met for joining room online:',
        currentValues
      )
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ª–∏ –º—ã —É–∂–µ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
    if (hasJoinedRef.current && currentRoomIdRef.current === roomId) {
      console.log('‚úÖ Already joined this room, skipping')
      return
    }

    // –ï—Å–ª–∏ –º—ã –±—ã–ª–∏ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ –≤—ã—Ö–æ–¥–∏–º
    if (hasJoinedRef.current && currentRoomIdRef.current !== roomId) {
      console.log('üîÑ Switching rooms, leaving previous room first:', {
        previousRoomId: currentRoomIdRef.current,
        newRoomId: roomId,
      })
      leaveOnline(false) // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º sendBeacon –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–º–Ω–∞—Ç
    }

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
    console.log('üöÄ Attempting to join room online')
    joinOnline(roomId, userId)
  }, [enabled, roomId, userId, isAuthenticated, joinOnline, leaveOnline]) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  useEffect(() => {
    if (
      !hasJoinedRef.current ||
      !currentRoomIdRef.current ||
      !currentUserIdRef.current
    ) {
      return
    }

    const interval = setInterval(() => {
      if (
        hasJoinedRef.current &&
        currentRoomIdRef.current &&
        currentUserIdRef.current
      ) {
        const key = `room_online_${currentUserIdRef.current}_${currentRoomIdRef.current}`
        const data = {
          tabId: tabIdRef.current,
          timestamp: Date.now(),
        }
        localStorage.setItem(key, JSON.stringify(data))
      }
    }, 10000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval)
  }, [])

  // –í—ã—Ö–æ–¥–∏–º –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üîß useRoomOnlineStatus cleanup useEffect mounted')
    return () => {
      console.log(
        'üîß useRoomOnlineStatus cleanup triggered (component unmounting):',
        {
          hasJoinedRef: hasJoinedRef.current,
          timestamp: new Date().toISOString(),
        }
      )
      if (hasJoinedRef.current) {
        console.log('üîß Calling leaveOnline from cleanup (using fetch)')
        leaveOnline(false) // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º sendBeacon –ø—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–º —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      }
    }
  }, [leaveOnline])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
  useEffect(() => {
    const handleBeforeUnload = () => {
      console.log('üö® beforeunload event triggered:', {
        hasJoinedRef: hasJoinedRef.current,
        timestamp: new Date().toISOString(),
      })
      if (hasJoinedRef.current) {
        leaveOnline(true) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º sendBeacon
      }
    }

    const handleVisibilityChange = () => {
      console.log('üëÅÔ∏è visibilitychange event triggered:', {
        visibilityState: document.visibilityState,
        hasJoinedRef: hasJoinedRef.current,
        timestamp: new Date().toISOString(),
      })
      if (document.visibilityState === 'hidden' && hasJoinedRef.current) {
        console.log('üëÅÔ∏è Page hidden, leaving room online')
        leaveOnline(true) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º sendBeacon
      }
    }

    const handlePageHide = () => {
      console.log('üö® pagehide event triggered:', {
        hasJoinedRef: hasJoinedRef.current,
        timestamp: new Date().toISOString(),
      })
      if (hasJoinedRef.current) {
        leaveOnline(true) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º sendBeacon
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    window.addEventListener('beforeunload', handleBeforeUnload)
    window.addEventListener('pagehide', handlePageHide)
    document.addEventListener('visibilitychange', handleVisibilityChange)

    return () => {
      // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      window.removeEventListener('beforeunload', handleBeforeUnload)
      window.removeEventListener('pagehide', handlePageHide)
      document.removeEventListener('visibilitychange', handleVisibilityChange)
    }
  }, [leaveOnline])

  return {
    joinOnline,
    leaveOnline,
    isOnline,
  }
}
